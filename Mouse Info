Bus 001 Device 005: ID 361d:0100 Finalmouse UltralightX dongle

 bMaxPacketSize0        64
  idVendor           0x361d Finalmouse
  idProduct          0x0100 UltralightX dongle

Endpoint Descriptor:
    bLength                 7
    bDescriptorType         5
    bEndpointAddress     0x81  EP 1 IN
    bmAttributes            3
        Transfer Type            Interrupt
        Synch Type               None
        Usage Type               Data
    wMaxPacketSize     0x0040  1x 64 bytes
    bInterval               1
Endpoint Descriptor:
    bLength                 7
    bDescriptorType         5
    bEndpointAddress     0x01  EP 1 OUT
    bmAttributes            3
        Transfer Type            Interrupt
        Synch Type               None
        Usage Type               Data
    wMaxPacketSize     0x0040  1x 6

383-390: Set Motion Sync On.
Out 1:
0000   04 03 92 01 01 00 00 00 00 00 00 00 00 00 00 00
Out 2:
0000   05 03 12 01 00 00 00 00 00 00 00 00 00 00 00 00
Out 3:
0000   05 03 12 01 01 00 00 00 00 00 00 00 00 00 00 00

435-446: Set Motion Sync Off.
Out 1:
0000   04 03 92 01 00 00 00 00 00 00 00 00 00 00 00 00
Out 2:
0000   05 03 12 01 01 00 00 00 00 00 00 00 00 00 00 00
Out 3:
0040   05 03 12 01 00 00 00 00 00 00 00 00 00 00 00 00

Set DPI
400:    04 04 90 02 90 01 00 00 00 00 00 00 00 00 00 00
800:    04 04 90 02 20 03 00 00 00 00 00 00 00 00 00 00
1600:   04 04 90 02 40 06 00 00 00 00 00 00 00 00 00 00
3200:   04 04 90 02 80 0c 00 00 00 00 00 00 00 00 00 00
6400:   04 04 90 02 00 19 00 00 00 00 00 00 00 00 00 00

Set Polling Rate
500:    04 04 91 02 f4 01 00 00 00 00 00 00 00 00 00 00
1000:   05 04 04 02 e8 03 00 00 00 00 00 00 00 00 00 00
2000:   04 04 91 02 d0 07 00 00 00 00 00 00 00 00 00 00
4000:   04 04 91 02 a0 0f 00 00 00 00 00 00 00 00 00 00
8000:   ?












435-446: Set Motion Sync Off.

https://youtu.be/is9wVOKeIjQ?t=5615




    // let config_descriptor = device.active_config_descriptor();

    // config_descriptor.into_iter().for_each(|interface| {
    //     for descriptor in interface.interfaces() {
    //         let mut endpoints = descriptor.descriptors();
    //         let control_interface_opt = endpoints.find(|endpoint| endpoint.sub_class_code() == 1);

    //         if let Some(control_interface) = control_interface_opt {
    //             let _command_endpoint = control_interface
    //                 .endpoint_descriptors()
    //                 .find(|ep| ep.address() == COMMAND_ENDPOINT);

    //             println!("{:?}", _command_endpoint);

    //             let _command_endpoint = control_interface
    //                 .endpoint_descriptors()
    //                 .find(|ep| ep.address() == INTERRUPT_ENDPOINT);

    //             println!("{:?}", _command_endpoint);
    //         } else {
    //             println!("Control interface not found");
    //         }
    //     }
    //});


better Error handling?

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    let context = match Context::new() {
        Ok(ctx) => ctx,
        Err(e) => {
            eprintln!("Failed to create USB context: {}", e);
            return Err(e.into());
        }
    };

    // Initialize DeviceInfo
    let mut device_info = match initialize_device_info(&context) {
        Ok(info) => info,
        Err(e) => {
            eprintln!("Failed to initialize device info: {}", e);
            return Err(e);
        }
    };

    // Set Motion Sync
    if let Err(e) = device_info.set_motion_sync(false) {
        eprintln!("Failed to set motion sync: {}", e);
        return Err(e);
    }

    Ok(())
}
